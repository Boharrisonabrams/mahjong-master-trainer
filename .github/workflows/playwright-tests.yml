name: 🀄 Mahjong Trainer Premium Testing Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly for comprehensive testing
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # Visual Regression Testing
  visual-tests:
    name: 🎨 Visual Regression Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies  
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 🖼️ Run Visual Tests
        run: npx playwright test tests/visual/ --reporter=html
        
      - name: 📸 Upload Visual Diffs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: test-results/
          retention-days: 7

  # Cross-Browser Compatibility
  cross-browser-tests:
    name: 🌐 Cross-Browser Gaming Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 🎮 Run Cross-Browser Tests
        run: npx playwright test tests/cross-browser/ --project=${{ matrix.browser }} --reporter=html
        
      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.browser }}-test-results
          path: test-results/
          retention-days: 7

  # Performance Testing
  performance-tests:
    name: ⚡ Performance & Responsiveness
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: ⚡ Run Performance Tests
        run: npx playwright test tests/performance/ --project=chromium-desktop --reporter=html
        
      - name: 📈 Upload Performance Metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: test-results/performance-metrics/
          retention-days: 30

  # Game Flow Testing
  game-flow-tests:
    name: 🎯 Game Flow & UX Validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 🎮 Run Game Flow Tests
        run: npx playwright test tests/game-flow/ --reporter=html
        
      - name: 🎯 Upload Game Flow Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: game-flow-results
          path: test-results/
          retention-days: 7

  # Advanced Game State Testing
  game-state-tests:
    name: 🧠 Advanced Game State Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 🧪 Run Game State Tests
        run: npx playwright test tests/game-states/ --reporter=html
        
      - name: 🧠 Upload Game State Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: game-state-results
          path: test-results/
          retention-days: 7

  # Mobile Testing
  mobile-tests:
    name: 📱 Mobile Gaming Experience
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build Application
        run: npm run build
        
      - name: 📱 Run Mobile Tests
        run: npx playwright test --project=mobile-chrome --project=mobile-safari --reporter=html
        
      - name: 📲 Upload Mobile Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-test-results
          path: test-results/
          retention-days: 7

  # Comprehensive Test Report
  generate-report:
    name: 📋 Generate Premium Test Report
    needs: [visual-tests, cross-browser-tests, performance-tests, game-flow-tests, game-state-tests, mobile-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-test-results
          
      - name: 📊 Generate Comprehensive Report
        run: |
          echo "# 🀄 Mahjong Trainer Premium Testing Report" > test-summary.md
          echo "## Test Execution Summary" >> test-summary.md
          echo "- **Visual Regression**: ${{ needs.visual-tests.result }}" >> test-summary.md
          echo "- **Cross-Browser**: ${{ needs.cross-browser-tests.result }}" >> test-summary.md
          echo "- **Performance**: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- **Game Flow**: ${{ needs.game-flow-tests.result }}" >> test-summary.md
          echo "- **Game States**: ${{ needs.game-state-tests.result }}" >> test-summary.md
          echo "- **Mobile**: ${{ needs.mobile-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "Generated at: $(date)" >> test-summary.md
          
      - name: 📋 Upload Test Summary
        uses: actions/upload-artifact@v4
        with:
          name: premium-test-report
          path: test-summary.md
          retention-days: 30

  # Notify on Quality Gate
  quality-gate:
    name: 🚪 Premium Quality Gate
    needs: [visual-tests, cross-browser-tests, performance-tests, game-flow-tests, game-state-tests, mobile-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🎯 Evaluate Quality Gate
        run: |
          echo "Evaluating premium gaming experience quality..."
          
          # Check if critical tests passed
          VISUAL_RESULT="${{ needs.visual-tests.result }}"
          CROSS_BROWSER_RESULT="${{ needs.cross-browser-tests.result }}"
          PERFORMANCE_RESULT="${{ needs.performance-tests.result }}"
          
          if [[ "$VISUAL_RESULT" == "success" && "$CROSS_BROWSER_RESULT" == "success" && "$PERFORMANCE_RESULT" == "success" ]]; then
            echo "✅ PREMIUM QUALITY GATE PASSED"
            echo "🎮 Ready for production-level gaming experience!"
            exit 0
          else
            echo "❌ PREMIUM QUALITY GATE FAILED"
            echo "🔧 Quality improvements needed before release"
            exit 1
          fi